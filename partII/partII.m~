function [] = partII()

    % generate the data

    rng(1); 
    r = sqrt(rand(100,1)); 
    t = 2*pi*rand(100,1);  
    data1 = [r.*cos(t), r.*sin(t)]; 

    r2 = sqrt(3*rand(100,1)+1); 
    t2 = 2*pi*rand(100,1);      
    data2 = [r2.*cos(t2), r2.*sin(t2)]; 

    % plot the data

    figure;
    plot(data1(:,1),data1(:,2),'r.','MarkerSize',15)
    hold on
    plot(data2(:,1),data2(:,2),'b.','MarkerSize',15)
    axis equal
    hold on

    % work on class 1
    [a1, R1] = calcRandCentre(data1);

    % work on class 2
    [a2, R2] = calcRandCentre(data2);

    % plot centre and radius for class 1
    plot(a1(1), a1(2), 'rx', 'MarkerSize', 15);
    viscircles(a1', R1, 'Color', 'r', 'LineWidth', 1);
    hold on

    % plot centre and radius for class 2
    plot(a2(1), a2(2), 'bx', 'MarkerSize', 15);
    viscircles(a2', R2, 'Color', 'b', 'LineWidth', 1);

end

function [a, R] = calcRandCentre(data)

    % to be completed

    % Formulate the result from previous question, 
    % note that on my report, it is max.. but here quadprog solve a min
    % problem, so I need change my function to -(...)
    % quadprog(H,f,A,b,Aeq,beq,lb,ub,x0)
    % H, A, and Aeq are matrices, and f, b, beq, lb, ub, and x are vectors.
    % First, calculate H, which is K in my illustration and 
    % it is x_i .* x_j
    n = length(data);
    H = zeros(n);
    for i = 1:n
        for j = 1:n
            H(i,j) = data(i,:)*transpose(data(j,:));
        end
    end
    % Then f, which is x_i .* x_i in max problem, should change to -f^T
    f = zeros(n,1);
    for i = 1:n
        f(p,1)=data(i,:)*transpose(data(i,:));
    end
    f = -transpose(f);
    C = 0.2;
    f = -transpose(omega);
    H = K;
    A = zeros(n);
    c = zeros(n,1);
    A_e = ones(1,n);
    c_e = 1;
  g_l = zeros(n,1);
  g_u = C*ones(n,1);
    g = quadprog(H,f,A,c,A_e,c_e,g_l,g_u);
    
end